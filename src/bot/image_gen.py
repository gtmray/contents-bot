import websocket
import uuid
import json
import urllib.request
import urllib.parse
import http.client
import logging.config

logging.config.fileConfig("../config/logging_config.ini")
logger = logging.getLogger()


class ImageWebsocketClient:
    def __init__(self, server_address):
        self.server_address = server_address
        self.client_id = str(uuid.uuid4())
        self.ws = None

    def connect(self):
        """Establish a WebSocket connection."""
        self.ws = websocket.WebSocket()
        self.ws.connect(
            f"ws://{self.server_address}/ws?clientId={self.client_id}"
        )

    def close(self):
        """Close the WebSocket connection."""
        if self.ws:
            self.ws.close()

    def queue_prompt(self, prompt):
        p = {"prompt": prompt, "client_id": self.client_id}
        data = json.dumps(p).encode("utf-8")
        req = urllib.request.Request(
            "http://{}/prompt".format(self.server_address), data=data
        )

        try:
            response = urllib.request.urlopen(req)
            return json.loads(response.read())
        except http.client.IncompleteRead as e:
            print(f"IncompleteRead error: {e}")
            return None
        except Exception as e:
            print(f"An error occurred: {e}")
            return None

    def get_image(self, filename, subfolder, folder_type):
        """Fetch an image from the server."""
        params = urllib.parse.urlencode(
            {"filename": filename, "subfolder": subfolder, "type": folder_type}
        )
        with urllib.request.urlopen(
            f"http://{self.server_address}/view?{params}"
        ) as response:
            return response.read()

    def get_history(self, prompt_id):
        """Fetch the history of a prompt by its ID."""
        with urllib.request.urlopen(
            f"http://{self.server_address}/history/{prompt_id}"
        ) as response:
            return json.loads(response.read())

    def get_images(self, prompt):
        """Get images generated by the WebSocket server based on a prompt."""
        prompt_id = self.queue_prompt(prompt)["prompt_id"]
        print(f"Prompt ID: {prompt_id}")

        output_images = {}
        current_node = ""

        while True:
            out = self.ws.recv()
            print(out)

            if isinstance(out, str):
                message = json.loads(out)
                if message["type"] == "executing":
                    data = message["data"]
                    if data["prompt_id"] == prompt_id:
                        if data["node"] is None:
                            break  # Execution is complete
                        else:
                            current_node = data["node"]
            else:
                if current_node == "save_image_websocket_node":
                    images_output = output_images.get(current_node, [])
                    images_output.append(out[8:])
                    output_images[current_node] = images_output

        return output_images


def generate_images(
    prompt, server_address, api_json_path, output_path, num_images, seed
):

    # Load the API JSON
    with open(api_json_path, "r") as file:
        prompt = json.load(file)

    # Update the prompt details
    prompt["6"]["inputs"]["text"] = prompt
    prompt["38"]["inputs"]["filename_prefix"] = output_path
    prompt["27"]["inputs"]["batch_size"] = num_images
    prompt["31"]["inputs"]["seed"] = seed

    # Initialize the WebSocket client
    client = ImageWebsocketClient(server_address)

    try:
        client.connect()
        prompt_id = client.queue_prompt(prompt)["prompt_id"]
        return prompt_id
    finally:
        client.close()
